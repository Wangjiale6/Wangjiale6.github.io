<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS知识点</title>
    <url>/2024/03/30/CSS%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<ul>
<li><h2 id="CSS3边框"><a href="#CSS3边框" class="headerlink" title="CSS3边框"></a>CSS3边框</h2></li>
</ul>
<p>边框属性：</p>
<p><code>border-radius</code>：创建圆角边框</p>
<p><code>box-Shadow</code>：附加一个或者多个下拉框的阴影</p>
<p><code>border-image</code>（不支持IE）：使用图像创建一个边框</p>
<h3 id="CSS3圆角"><a href="#CSS3圆角" class="headerlink" title="CSS3圆角"></a>CSS3圆角</h3><p>可以使用CSS3 圆角制作器来制作一个css3圆角，可以直接生成代码。</p>
<p>指定border-radius的每个圆角：</p>
<p>如果只指定一个值，则生成四个圆角；若在每个角上指定，则使用如下规则：</p>
<p>四个值：四个值分别指定左上角、右上角、右下角、左下角。</p>
<p>三个值：第一个值为左上角，第二个值为右上角和左下角，第三个值为右下角。</p>
<p>两个值：第一个值为左上角和右下角，第二个值为右上角和左下角。</p>
<p>一个值：四个圆角值相同。</p>
<h2 id="创建椭圆边角："><a href="#创建椭圆边角：" class="headerlink" title="创建椭圆边角："></a>创建椭圆边角：</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>： <span class="number">50px</span>/<span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure>

<h3 id="圆角属性："><a href="#圆角属性：" class="headerlink" title="圆角属性："></a>圆角属性：</h3><table>
<thead>
<tr>
<th align="left">代码</th>
<th align="center">控制内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-radius</td>
<td align="center">所有四个边角属性的缩写</td>
</tr>
<tr>
<td align="left">border-top-left-radius</td>
<td align="center">左上角的弧度</td>
</tr>
<tr>
<td align="left">border-top-right-radius</td>
<td align="center">右上角的弧度</td>
</tr>
<tr>
<td align="left">border-bottom-left-radius</td>
<td align="center">左下角的弧度</td>
</tr>
<tr>
<td align="left">border-bottom-right-radius</td>
<td align="center">右下角的弧度</td>
</tr>
</tbody></table>
<h3 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h3><p>四种背景属性：</p>
<p><code>background-image</code>：添加背景图片。不同的背景图像和图像用逗号隔开。</p>
<p><code>background-size</code>：指定背景图像的大小，可指定像素或者百分比的大小，是相对于父元素的宽度和高度的百分比的大小。</p>
<p><code>background-origin</code>：指定了背景图像的位置区域</p>
<ul>
<li><h2 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h2></li>
</ul>
<p>渐变可以让我们在两个或者多个颜色之间显示平稳的过渡。</p>
<p>两种类型的渐变：</p>
<p><code>Linear</code> <code>Gradients</code>：线性渐变-向下&#x2F;向上&#x2F;向左&#x2F;向右&#x2F;对角方向</p>
<p><code>Radial</code> <code>Gradients</code>：径向渐变，由它们的中心定义</p>
<p><strong>线性渐变</strong>：</p>
<h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>：linear-gradient(<span class="attribute">direction</span>, <span class="attribute">color</span>-stop1, <span class="attribute">color</span>-stop2, …);</span><br></pre></td></tr></table></figure>

<p>线性渐变默认情况是从上到下。</p>
<p>从左到右的线性渐变：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grad &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red, blue);</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-o-liner-gradient</span>(right, red, blue);</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, red, blue);</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, blue);<span class="comment">/*标准语法*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从左上角开始到右下角的渐变：</p>
<p>设置方向为：left top&#x2F;bottom right&#x2F;to bottom right(标准语法下)</p>
<p>使用角度对方向进行设置：</p>
<p>这里的角度是指水平线和渐变线之间的角度。So 0deg将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变。</p>
<p>使用透明度：</p>
<p>支持透明度，用于创建减弱变淡的效果。</p>
<p>为了添加透明度，使用rgba()函数来定义颜色结点。rgba()函数中的最后一个参数可以是从0到1的值，它定义了颜色的透明度：0表示完全透明，1表示完全不透明。</p>
<h3 id="重复的线性渐变："><a href="#重复的线性渐变：" class="headerlink" title="重复的线性渐变："></a>重复的线性渐变：</h3><p><code>repeating-linear-gradient()</code>函数用于重复的线性渐变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repeating-linear-gradient()  </span><br></pre></td></tr></table></figure>

<h3 id="径向渐变-："><a href="#径向渐变-：" class="headerlink" title="径向渐变 ："></a>径向渐变 ：</h3><p>我们可以指定渐变的中心、形状（圆形或者椭圆形）、大小，默认情况下，渐变的中心是center（表示在中心点），渐变的形状是ellipse（表示椭圆形），渐变的大小是farthest-corner（表示到最远的角落）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: radial-gradient(center, shape size, start-color, …, last-color);</span><br></pre></td></tr></table></figure>

<h3 id="颜色结点分布不均匀的径向渐变："><a href="#颜色结点分布不均匀的径向渐变：" class="headerlink" title="颜色结点分布不均匀的径向渐变："></a>颜色结点分布不均匀的径向渐变：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grad&#123;</span><br><span class="line"></span><br><span class="line">background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Size参数</code>定义了渐变的大小，可以是以下四个值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">closest-side/farthest-side/closest-corner/farthest-corner</span><br></pre></td></tr></table></figure>

<h3 id="重复的径向渐变："><a href="#重复的径向渐变：" class="headerlink" title="重复的径向渐变："></a>重复的径向渐变：</h3><p><code>Reperting-radial-gradient()</code>函数用于重复径向渐变。</p>
<h3 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="## CSS3文本效果"></a>## CSS3文本效果</h3><h4 id="包含属性："><a href="#包含属性：" class="headerlink" title="包含属性："></a>包含属性：</h4><p><code>text-shadow</code>：适用于文本阴影，可以指定是水平阴影还是垂直阴影、模糊的距离以及阴影的颜色。</p>
<p><code>box-shadow</code>：适用于盒子阴影。同上。可以在::after和::before两个伪元素中添加阴影效果。</p>
<p><code>text-overflow</code>：文本溢出属性指定应向用户如何显示溢出内容**</p>
<p>有两个属性：ellipsis（以省略号的形式隐藏内容）和clip（直接截断内容）</p>
<p><code>word-wrap</code>：强制换行，但是单词中间不换行</p>
<p><code>word-break</code>：单词可进行拆分然后换行</p>
<ul>
<li><h2 id="CSS3字体"><a href="#CSS3字体" class="headerlink" title="CSS3字体"></a>CSS3字体</h2></li>
</ul>
<p><code>@font-face规则</code>，若使用，首先定义字体的名称，然后指向该文字字体。</p>
<p>通过<code>font-family</code>属性来引用字体的名称。</p>
<table>
<thead>
<tr>
<th>描述符</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>font-family</td>
<td>name</td>
<td>必需，规定字体的名称。</td>
</tr>
<tr>
<td>src</td>
<td>URL</td>
<td></td>
</tr>
<tr>
<td>font-strench</td>
<td>normal<br/><br/>condensed<br/><br/>ultra-condensed<br/><br/>extra-condensed<br/><br/>semi-condensed<br/><br/>expanded<br/><br/>semi-expanded<br/><br/>extra-expanded<br/><br/>ultra-expanded</td>
<td>可选，定义如何拉伸字体，默认值是nomal</td>
</tr>
<tr>
<td>font-style</td>
<td>nomal<br/><br/>Italic<br/><br/>oblique</td>
<td>可选，定义字体的样式</td>
</tr>
<tr>
<td>font-weight</td>
<td>nomal<br/><br/>bold<br/><br/>100<br/><br/>200<br/><br/>……<br/><br/>900</td>
<td>可选，定义字体的粗细</td>
</tr>
<tr>
<td>unicode-range</td>
<td>unicode-range</td>
<td>可选，定义字体支持的UNICODE字符范围</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><h3 id="CSS3-2D转换"><a href="#CSS3-2D转换" class="headerlink" title="CSS3 2D转换"></a>CSS3 2D转换</h3></li>
</ul>
<p>2D变换方法：</p>
<p><code>translate()</code>：平移</p>
<p><code>rotate()</code>：在一个给定度数顺时针旋转的元素</p>
<p><code>scale()</code></p>
<p><code>skew()</code></p>
<p><code>matrix()</code></p>
<h3 id="CSS3过渡"><a href="#CSS3过渡" class="headerlink" title="CSS3过渡"></a>CSS3过渡</h3><p>为了添加某种效果可以从一个样式转变到另一个的时候，无需使用flash动画或JavaScript，只需要鼠标移动到上面就可以。</p>
<p>我们要实现这样的效果，必须规定两项内容：</p>
<p>指定要添加效果的CSS属性和效果的持续时间</p>
<p>所有的过渡属性：</p>
<p>transition：简写属性，用于在一个属性中设置四个过渡属性</p>
<p>transition-property：规定应用过渡的CSS属性的名称</p>
<p>transition-duration：定义过渡效果花费的时间，默认是0</p>
<p>transition-timing-function：规定过渡效果的时间曲线，默认是‘ease‘</p>
<p>transition-delay：规定过渡时间何时开始，默认是0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">transition-property: width;</span><br><span class="line"></span><br><span class="line">transition-duration: 1s;</span><br><span class="line"></span><br><span class="line">transition-timing-function: linear;</span><br><span class="line"></span><br><span class="line">transition-delay: 2s;</span><br><span class="line"></span><br><span class="line">&#125;//等价于div&#123; transition: width 1s linear 2s; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h2></li>
</ul>
<h3 id="创建动画，可以取代许多网页动画图像，Flash动画和JavaScript"><a href="#创建动画，可以取代许多网页动画图像，Flash动画和JavaScript" class="headerlink" title="创建动画，可以取代许多网页动画图像，Flash动画和JavaScript"></a>创建动画，可以取代许多网页动画图像，Flash动画和JavaScript</h3><p> CSS3<code>@keyframes</code>规则</p>
<p>该规则是创建动画。@keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。</p>
<p>当@keyframes创建动画时，把它绑定到一个选择器，否则不会有任何效果。</p>
<p>指定至少两个CSS3的动画属性绑定向一个选择器：规定动画的名称和动画的时长。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">width: 100px;</span><br><span class="line"></span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">background: red;</span><br><span class="line"></span><br><span class="line">animation: myfirst 5s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes myfirst &#123;</span><br><span class="line"></span><br><span class="line">from &#123; background: red;&#125;</span><br><span class="line"></span><br><span class="line">to &#123; backgroung: yellow;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以改变任意多的样式任意多的次数。请用百分比来规定变化发生的时间，或用关键词<code>from</code>和<code>to</code>，等同于<code>0%</code>和<code>100%</code>。 0%是动画的开始，100%是动画的完成 。</p>
<h3 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h3><p>多列属性：</p>
<p>column-count：指定元素的列数应分为几列。</p>
<p>div {</p>
<p>-moz-column-count:3;&#x2F;<em>Firefox</em>&#x2F;</p>
<p>}</p>
<p>column-gap：指定的列之间的差距</p>
<p>column-rule：设置列之间的宽度、样式和颜色</p>
<p>column-rule-color：指定的列之间颜色规则</p>
<p>column-rule-style：指定的列之间的样式规则</p>
<p>column-rule-width：指定的列之间的宽度规则</p>
<p>column-width：指定列的宽度</p>
<p>column-span：指定一个元素应该横跨多少列</p>
<p>columns：缩写属性设置列宽和列数</p>
<p>column-fill：指定如何填充列</p>
<h3 id="CSS-3用户界面"><a href="#CSS-3用户界面" class="headerlink" title="CSS 3用户界面"></a>CSS 3用户界面</h3><p>新增加了一些新的用户界面特性来调整元素尺寸、框尺寸和外边框。</p>
<p>用户界面属性：</p>
<p>resize：指定一个元素是否应该由用户去调整大小</p>
<p>box-sizing：允许以确切的方式定义适应某个区域的具体内容</p>
<p>outline-offset：对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。轮廓与边框不同，轮廓不占用空间，而且可能是非矩形。</p>
<ul>
<li><h2 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h2></li>
</ul>
<p>所有HTML元素可以看作盒子。CSS盒模型本质上是一个盒子，封装周围的HTML元素，包括：边距、边框、填充和实际内容。</p>
<h3 id="Margin：外边距-，清除边框外的区域，外边距是透明的。"><a href="#Margin：外边距-，清除边框外的区域，外边距是透明的。" class="headerlink" title="Margin：外边距 ，清除边框外的区域，外边距是透明的。"></a>Margin：外边距 ，清除边框外的区域，外边距是透明的。</h3><h3 id="Border：边框-，围绕在内边距和内容外的边框。"><a href="#Border：边框-，围绕在内边距和内容外的边框。" class="headerlink" title="Border：边框 ，围绕在内边距和内容外的边框。"></a>Border：边框 ，围绕在内边距和内容外的边框。</h3><h3 id="Padding：-内边距，清除内容周围的区域，内边距是透明的。"><a href="#Padding：-内边距，清除内容周围的区域，内边距是透明的。" class="headerlink" title="Padding： 内边距，清除内容周围的区域，内边距是透明的。"></a>Padding： 内边距，清除内容周围的区域，内边距是透明的。</h3><h3 id="Content：-盒子的内容，显示文本和图像。"><a href="#Content：-盒子的内容，显示文本和图像。" class="headerlink" title="Content： 盒子的内容，显示文本和图像。"></a>Content： 盒子的内容，显示文本和图像。</h3><p><font color="red">总元素的宽度 &#x3D; 宽度 + 左填充（padding） + 右填充 + 左边框 + 右边框 + 左边距 + 右边距</font>&gt;</p>
<p>两种盒模型的比较：</p>
<p>盒模型分为W3C的标准盒模型和IE盒模型。</p>
<p>标准盒模型的宽度就是content的宽度，高度是content的高度，而IE盒模型的宽度是content+padding+border的总和。</p>
<p>切换盒模型的方法：设置box-sizing属性。</p>
<p>box-sizing: content-box &#x2F;&#x2F;W3C盒子模型</p>
<p>box-sizing:border-box &#x2F;&#x2F;IE盒子模型</p>
<ul>
<li><h2 id="CSS3弹性盒子（Flex-Box）"><a href="#CSS3弹性盒子（Flex-Box）" class="headerlink" title="CSS3弹性盒子（Flex Box）"></a>CSS3弹性盒子（Flex Box）</h2></li>
<li><p>一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p>
<p>弹性盒子由弹性容器和弹性子元素组成。弹性容器通过设置display属性的值为flex或inline-flex（行内元素设置为Flex布局）将其定义为弹性容器。</p>
<p>注：设为了Flex布局以后，子元素的float、clear和virtical-align属性将失效。</p>
<p>弹性容器内包含一个或多个弹性子元素。</p>
<p>注意：弹性容器外及弹性子元素内是正常渲染的，弹性盒子只定义了弹性元素的如何在弹性容器内布局。弹性子元素通常在弹性盒子内一行显示，默认情况每个容器只有一行。修改排列方式：rtl(right to left)</p>
<p>body { direction: rtl; }</p>
<p>弹性容器上的属性共有6个：</p>
<p>flex-direction</p>
<p>flex-wrap</p>
<p>flex-flow</p>
<p>justify-content</p>
<p>align-items</p>
<p>align-content①flex-direcion：决定了主轴的方向（即弹性子元素在父容器中的排列方向）。</p>
<p>语法：flex-direction: row | row-reverse | column | column-reverse</p>
<p>row：横向从左到右排列。默认的排列方式。</p>
<p>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面）</p>
<p>column：纵向排列。</p>
<p>column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。</p>
<p>②flex-wrap：默认情况下，项目都排在一条线上，该属性定义如果一条轴线排不下，如何换行。</p>
<p>语法：flex-wrap: nowrap | wrap | wrap-reverse</p>
<p>③flex-flow：该属性是flex-direction属性和flex-wrap属性的简写形式，默认值是row nowrap。</p>
<p>④justify-content：定义了项目在主轴上的对齐方式，把弹性项沿着弹性容器的主轴线对齐。</p>
<p>语法：justify-content: flex-start | flex-end | center | space-between | space-around</p>
<p>flex-start：左对齐</p>
<p>flex-end：右对齐</p>
<p>center：居中</p>
<p>space-between：两端对齐，项目之间的间隔都是相等的</p>
<p>space-around：每个项目两侧的间隔相等，所以项目之间的间隔比项目与边框的间隔大一倍。</p>
<p>⑤align-items：定义项目在交叉轴上如何对齐。</p>
<p>语法：align-items: flex-start | flex-end | center | baseline | strench</p>
<p>baseline：项目的第一行文字的基线对齐</p>
<p>strench（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>
<p>⑥align-content：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p>语法：align-content: flex-start | flex-end | center | space-between | space-around | strench(默认值)</p>
<p>弹性子元素上的6个属性：</p>
<p>order</p>
<p>flex-grow</p>
<p>flex-shrink</p>
<p>flex-basis</p>
<p>flex</p>
<p>align-self</p>
<p>①order :定义弹性子元素的排列顺序。数值越小，排列越靠前，默认为0。</p>
<p>语法：order: <integer></p>
<p>②flex-grow:定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<p>语法：flex-grow: <number></p>
<p>③flex-shrink:定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。负值对该属性无效。</p>
<p>语法：flex-shrink: <number></p>
<p>④flex-basis：定义了在分配多余空间之前，项目占据的主轴空间。默认值为auto</p>
<p>⑤flex属性是flex-grow、flex-shrink、flex-basis的简写，默认值是 0 1 auto。建议优先使用这个属性。该属性有两个快捷值： auto(1 1 auto) 和none(0 0 auto)。</p>
<p>⑥align-self：允许单个弹性子元素有与其他子元素不一样的对齐方式。可覆盖align-items属性，默认值为auto，表示继承弹性容器的align-items属性，如果没有父元素，则等同于strench。</p>
<ul>
<li><h2 id="CSS3多媒体查询"><a href="#CSS3多媒体查询" class="headerlink" title="CSS3多媒体查询"></a>CSS3多媒体查询</h2></li>
</ul>
<p>CSS中我们可以根据不同的媒体类型（包括显示器、便携设备、电视机等）来设置不同的样式规则。</p>
<p>可以设置分辨率来调节显示样式</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML知识点</title>
    <url>/2024/03/29/HTML%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="HTML总结"><a href="#HTML总结" class="headerlink" title="HTML总结"></a>HTML总结</h3><p>基础认知<br>HTML(HTML (Hyper Text Markup Language）中文译为︰超文本标记语言。专门用于网页开发的语言，主要通过HTML标签对网页中的文本、图片、音频、视频等内容进行描述。</p>
<p>HTML骨架标签由html标签（网页的整体）、head标签（网页的头部）、body标签（网页的身体）、title标签（网页的标题）组成。</p>
<p>HTML注释：</p>
<p>HTML标签的结构：</p>
<p>标签由&lt;、&gt;、&#x2F;、英文单词或字母组成。并且把标签中&lt;&gt;包括起来的英文单词或字母称为标签名<br>常见标签由两部分组成，我们称之为:双标签。前部分叫开始标签，后部分叫结束标签，两部分之间包裹内容&lt; p &gt;&lt; p&#x2F; &gt;<br>少数标签由一部分组成，我们称之为:单标签。自成一体，无法包裹内容。&lt; br &gt;<br>HTML标签与标签之间的关系：</p>
<h3 id="1、父子关系-嵌套关系"><a href="#1、父子关系-嵌套关系" class="headerlink" title="1、父子关系(嵌套关系)"></a>1、父子关系(嵌套关系)</h3><h1>1级标题</h1>
<h2>2级标题</h2>
<h3>3级标题</h3>
<h4>4级标题</h4>
<h5>5级标题</h5>
<h6>6级标题</h6>



]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法知识点</title>
    <url>/2024/03/29/MarkDown%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览:"></a>总览:</h2><h5 id="Markdown是一种轻量级的标记语言，可用于将格式设置元素添加到纯文本文档中。Markdown-由John-Gruber于2004年创建，如今已成为世界上最受欢迎的标记语言之一。"><a href="#Markdown是一种轻量级的标记语言，可用于将格式设置元素添加到纯文本文档中。Markdown-由John-Gruber于2004年创建，如今已成为世界上最受欢迎的标记语言之一。" class="headerlink" title="   Markdown是一种轻量级的标记语言，可用于将格式设置元素添加到纯文本文档中。Markdown 由John Gruber于2004年创建，如今已成为世界上最受欢迎的标记语言之一。 "></a><font color="red">   Markdown是一种轻量级的标记语言，可用于将格式设置元素添加到纯文本文档中。Markdown 由John Gruber于2004年创建，如今已成为世界上最受欢迎的标记语言之一。 </font></h5><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="1-使用-号创建标题"><a href="#1-使用-号创建标题" class="headerlink" title="1. 使用#号创建标题"></a>1. 使用#号创建标题</h3><p>使用 # 创建标题可以支持6级标题。你需要几级标题就输入几个 # 号，然后再输入一个空格后，即可生成所需要的标题。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1级标题</span></span><br><span class="line"><span class="section">## 2级标题</span></span><br><span class="line"><span class="section">### 3级标题</span></span><br><span class="line"><span class="section">#### 4级标题</span></span><br><span class="line"><span class="section">##### 5级标题</span></span><br><span class="line"><span class="section">###### 6级标题</span></span><br></pre></td></tr></table></figure>

<h3 id="2-使用-和-号创建标题"><a href="#2-使用-和-号创建标题" class="headerlink" title="2. 使用&#x3D;和-号创建标题"></a>2. 使用&#x3D;和-号创建标题</h3><p>使用 &#x3D; 可以创建一级标题，使用-可以创建二级标题。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">一级标题 ======== </span><br><span class="line">二级标题 --------</span><br></pre></td></tr></table></figure>

<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落直接输入文字就行了，切记行首不要带有空格Space 或制表符 Tab。</p>
<h3 id="1-换行"><a href="#1-换行" class="headerlink" title="1. 换行"></a>1. 换行</h3><p>输入两个或两个以上空格结束一行，然后键入回车键 Enter.</p>
<h3 id="2-字体格式"><a href="#2-字体格式" class="headerlink" title="2. 字体格式"></a>2. 字体格式</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体字 &gt;&gt;就是在字的前后各添加一个星号*</span>  </span><br><span class="line"><span class="emphasis">_斜体字 &gt;&gt;也可以在字的前后各添加一个下划线_</span>  </span><br><span class="line"><span class="strong">**粗体字 &gt;&gt;就是在字的前后各添加两个星号**</span>  </span><br><span class="line"><span class="strong">__粗体字 &gt;&gt;也可以在字的前后各添加两个下划线__</span>  </span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体字 &gt;&gt;就是在字的前后各添加三个星号*</span>**</span>  </span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体字 &gt;&gt;也可以在字的前后各添加三个下划线_</span>__</span>  </span><br></pre></td></tr></table></figure>

<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>可以通过在段落的字体上放置一条横线来表示“删除”，表示这是错误的或不存在。要实现该功能只需要在文字的两端添加两个波浪线 ~~ 即可。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-脚注"><a href="#4-脚注" class="headerlink" title="4. 脚注"></a>4. 脚注</h3><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。创建脚注时，带有脚注引用的链接将出现带有链接的上标编号。读者可以单击链接跳至页面底部的脚注内容。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">这是测试脚注[^标识符]。</span><br><span class="line"></span><br><span class="line">这是数字脚注[^1]。这是文字脚注[^文本脚注]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^标识符</span>]:<span class="link">标识符可以是数字或文本。但不能包含空格或制表符。  </span></span><br><span class="line">[<span class="symbol">^1</span>]:<span class="link">数字脚注测试说明。  </span></span><br><span class="line">[<span class="symbol">^文本脚注</span>]:<span class="link">文本脚注测试说明。</span></span><br></pre></td></tr></table></figure>

<h3 id="5-下划线"><a href="#5-下划线" class="headerlink" title="5. 下划线"></a>5. 下划线</h3><p>Markdown本身并没有该语法，因为会和超链接样式混淆。所以如非不要请不要添加。<br>但可以使用html标签来实现（u指的是underline下划线）。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>需要添加下划线的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6-首行缩进"><a href="#6-首行缩进" class="headerlink" title="6. 首行缩进"></a>6. 首行缩进</h3><p>Markdown本身并没有该语法，但可以使用下面的语法（两个&amp;emsp；）替代传统的两个字符缩进。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;Markdown本身并没有该语法，这只是一种非常简单的替代方法；当然Markdown语法支持html语句，可以直接用html标签来实现，请自行搜索学习。</span><br></pre></td></tr></table></figure>

<h3 id="7-字体颜色、大小、字体类型"><a href="#7-字体颜色、大小、字体类型" class="headerlink" title="7. 字体颜色、大小、字体类型"></a>7. 字体颜色、大小、字体类型</h3><p><strong>Markdown</strong>本身并没有该语法，<font color="red">但<strong>Markdown</strong>支持<strong>HTML</strong>的语法。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;&quot; size=4 face=&quot;&quot;&gt;字体颜色、大小、字体类型&lt;/font&gt;  </span><br><span class="line">&lt;font color=&quot;blue&quot; size=3 face=&quot;楷体&quot;&gt;这是蓝色3号楷体子&lt;/font&gt;  </span><br><span class="line">&lt;font color=&quot;red&quot;&gt;这是红色字体，可单独配置一项&lt;/font&gt;  </span><br><span class="line">&lt;font size=4&gt;这是4号字体，可单独配置一项&lt;/font&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="8-文本高亮"><a href="#8-文本高亮" class="headerlink" title="8. 文本高亮"></a>8. 文本高亮</h3><p><strong>Markdown</strong>本身并没有该语法，但<strong>Markdown</strong>支持<strong>HTML</strong>的语法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不需要高亮，&lt;mark&gt;重点提示需要高亮显示&lt;/mark&gt;，\&lt;mark&gt; 是HTML5的新标签。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>在段落的开头添加一个 &gt; , 然后再键入一个空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 块引用  </span><br><span class="line">&gt; blockquote  </span><br></pre></td></tr></table></figure>

<h3 id="1-嵌套块引用"><a href="#1-嵌套块引用" class="headerlink" title="1. 嵌套块引用"></a>1. 嵌套块引用</h3><p>区块可以嵌套，在需要的段落前面再添加一个 &gt;。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 嵌套主体  </span></span><br><span class="line">&gt;&gt; 第一层嵌套  </span><br><span class="line">&gt;&gt;&gt; 第二层嵌套 </span><br></pre></td></tr></table></figure>

<h3 id="2-具有其他元素的块引用"><a href="#2-具有其他元素的块引用" class="headerlink" title="2. 具有其他元素的块引用"></a>2. 具有其他元素的块引用</h3><p>块引用可以包含其他Markdown格式的元素。并非所有元素都可以使用-您需要进行实验以查看哪些元素有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ### 在块引用中添加标题 </span><br><span class="line">&gt; 1. 在块引用添加项目编号</span><br><span class="line">&gt; 2. 在块引用添加项目编号  </span><br><span class="line">&gt; + 在块引用添加项目符号 </span><br><span class="line">&gt; - 在块引用添加项目符号 </span><br><span class="line">&gt; * 在块引用添加项目符号 </span><br><span class="line">&gt; - **粗体文本** 和 *斜体文本*</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>支持有序列表和无序列表。</p>
<h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h3><p>只需要在前面添加添加数字和. ，然后键入空格Space。数字不必按数字顺序排列，但列表应以数字开头。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br><span class="line">4. 第四项</span><br><span class="line">5. 第五项</span><br><span class="line">6. 第六项</span><br><span class="line">   1. 缩进项（键入4个空格或制表符）</span><br><span class="line">   2. 缩进项（键入4个空格或制表符） </span><br></pre></td></tr></table></figure>

<h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2. 无序列表"></a>2. 无序列表</h3><p>请在订单项前添加减号 -，星号 * 或加号 +。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">* 第三项</span><br><span class="line">* 第四项</span><br><span class="line">+ 第五项</span><br><span class="line">+ 第六项</span><br><span class="line">    + 缩进项（键入4个空格或制表符）</span><br><span class="line">    - 缩进项（键入4个空格或制表符） </span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>要将段落中的函数或其他表达式表示为代码，请将其括在勾号 &#96; 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`main()`函数中调用`printf()`函数</span><br></pre></td></tr></table></figure>

<h3 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h3><p>要创建代码块，请在代码块的每一行缩进至少四个空格 Space 或一个制表符 Tab 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(i=0; i&lt;8; i++) &#123;</span><br><span class="line">    printf(&quot;这是代码块测试代码&quot;);</span><br><span class="line">    delay_ms(1000);                 /* 延时1s */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-围栏代码块"><a href="#2-围栏代码块" class="headerlink" title="2. 围栏代码块"></a>2. 围栏代码块</h3><p>根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个刻度线 &#96;&#96;&#96; 或三个波浪号~~~ ；如果需要高亮显示，请指定对应的语言，诸如C、C++、JAVA、Python等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">for(i=0; i&lt;8; i++) &#123;</span><br><span class="line">    printf(&quot;这是代码块测试代码&quot;);</span><br><span class="line">    delay_ms(1000);                 /* 延时1s */</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">```c++</span><br><span class="line">for(i=0; i&lt;8; i++) &#123;</span><br><span class="line">    printf(&quot;这是代码块测试代码&quot;);</span><br><span class="line">    delay_ms(1000);                 /* 延时1s */</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><font color="red">创建链接时。首先再方括号中填写链接文本（例如[链接名称]），然后再紧跟方括号的括号（例如(<a href="https://www.google.com))中填写链接地址url./">https://www.google.com)）中填写链接地址URL。</a></font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我常用的搜索引擎是[百度](https://www.google.com)</span><br></pre></td></tr></table></figure>

<h3 id="1-为链接添加标题"><a href="#1-为链接添加标题" class="headerlink" title="1. 为链接添加标题"></a>1. 为链接添加标题</h3><p>您可以选择为链接添加标题。当用户将鼠标悬停在链接上时，这将显示为工具提示。要添加标题，直接在URL后面键入空格 Space 后添加标题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我常用的搜索引擎是[谷歌](https://www.google.com&quot;搜索引擎&quot;)。</span><br></pre></td></tr></table></figure>

<h3 id="2-网址和电子邮件地址"><a href="#2-网址和电子邮件地址" class="headerlink" title="2. 网址和电子邮件地址"></a>2. 网址和电子邮件地址</h3><p>要将URL或电子邮件地址快速转换为链接，请将其括在尖括号中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;https://markdown.p2hp.com&gt;</span><br><span class="line">&lt;xxxx@email.com&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-格式化链接"><a href="#3-格式化链接" class="headerlink" title="3. 格式化链接"></a>3. 格式化链接</h3><p>为了强调链接，请在方括号和括号之前和之后添加星号。<br><strong>其实就是相当于段落中字体格式的设置。</strong></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>要添加图像，请在链接的前面添加感叹号（!），然后在括号中添加替代文本，并在括号中添加图像资源的路径或URL。您可以选择在括号中的URL之后添加标题。</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>要添加表格，请使用三个或多个连字符 — 创建每列的标题，并使用竖线 | 分隔每列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 标题 | 标题 |</span><br><span class="line">| --- | -------------- |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<h3 id="1-使用图形界面创建表格"><a href="#1-使用图形界面创建表格" class="headerlink" title="1. 使用图形界面创建表格"></a>1. 使用图形界面创建表格</h3><p>使用字符创建表格很费事、很麻烦，为了加快这一过程,我们可以使用在线表格生成器<a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables Generator</a>。</p>
<h3 id="2-对齐方式"><a href="#2-对齐方式" class="headerlink" title="2. 对齐方式"></a>2. 对齐方式</h3><p>要实现类似Excel文本的左对齐、居中、右对齐，只需要在连字符的左侧、两侧、右侧添加冒号 : 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 物料编号 | 物料名称 | 物料封装 |</span><br><span class="line">| :--- | :------: |----:|</span><br><span class="line">| 1 | PCB板 | Main Board |</span><br><span class="line">| 2 | SPC5634MF2MLQ80 | LQFP144 |</span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown使用很多字符表示特定的意思，要显示原义字符，请在字符的前面添加反斜杠 \ ,这样就可以转义字符了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 没有使用反斜杠，这是4级标题</span><br><span class="line">\#### 使用反斜杠，这就是4个#号</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Js常用知识点</title>
    <url>/2024/03/31/Js%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><font color="red">JavaScript 最开始是专门为浏览器设计的一门语言，但是现在也被用于很多其他的环境。如今，JavaScript 已经成为了与 HTML&#x2F;CSS 完全集成的，使用最广泛的浏览器语言[GPT改写]。  </font></p>
<h4 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1. JavaScript简介"></a>1. JavaScript简介</h4><p>​	简而言之，JS是一种轻量级语言，通过DOM操作、CSS操作等技巧，让网页元素发生变化，给用户带来意想不到的效果。</p>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><p>我们可以使用 var、let 或 const 声明变量来存储数据。</p>
<ul>
<li><p><code>let </code>— 现代的变量声明方式。</p>
</li>
<li><p><code>var </code>— 一般情况不会再使用它。</p>
</li>
<li><p><code>const </code>— 类似于<code> let</code>，但是变量的值无法被修改。</p>
</li>
</ul>
<h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><p>JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型）。</p>
<ul>
<li><p><code>number</code> 用于任何类型的数字：整数或浮点数，在 ±(253-1) 范围内的整数。</p>
</li>
<li><p><code>bigint</code> 用于任意长度的整数。</p>
</li>
<li><p><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</p>
</li>
<li><p><code>boolean</code> 用于 true 和 false。</p>
</li>
<li><p><code>null</code> 用于未知的值 —— 只有一个 null 值的独立类型。</p>
</li>
<li><p><code>undefined</code> 用于未定义的值 —— 只有一个 undefined 值的独立类型。</p>
</li>
<li><p><code>symbol</code> 用于唯一的标识符。</p>
</li>
<li><p><code>object</code> 用于更复杂的数据结构。</p>
</li>
</ul>
<p>我们可以通过 <code>typeof</code> 运算符查看存储在变量中的数据类型。</p>
<p>两种形式：<code>typeof x</code> 或者<code> typeof(x)</code>。</p>
<p>以字符串的形式返回类型名称，例如 “string”。</p>
<p><code>typeof null </code>会返回 “object” —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 object。</p>
<h3 id="4-类型转换"><a href="#4-类型转换" class="headerlink" title="4.类型转换"></a>4.类型转换</h3><p>有三种常用的类型转换：转换为<code> string</code> 类型、转换为 <code>number</code> 类型和转换为<code>boolean</code>类型。</p>
<ul>
<li><p>字符串转换 —— 转换发生在输出内容的时候，也可以通过 <code>String(value)</code> 进行显式转换。原始类型值的 string 类型转换通常是很明显的。</p>
</li>
<li><p>数字型转换 —— 转换发生在进行算术操作时，也可以通过 <code>Number(value)</code> 进行显式转换。</p>
</li>
<li><p>布尔型转换遵循以下规则：布尔型转换 —— 转换发生在进行逻辑操作时，也可以通过 Boolean(value) 进行显式转换。</p>
</li>
</ul>
<p>对 undefined 进行数字型转换时，输出结果为 NaN，而非 0。上述的大多数规则都容易理解和记忆。人们通常会犯错误的值得注意的例子有以下几个：</p>
<p>对 “0” 和只有空格的字符串（比如：” “）进行布尔型转换时，输出结果为 true。8. 函数</p>
<h3 id="5-函数声明方式如下所示："><a href="#5-函数声明方式如下所示：" class="headerlink" title="5.函数声明方式如下所示："></a>5.函数声明方式如下所示：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params">parameters, delimited, by, comma</span>) &#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前有许多优秀的函数名前缀，如 create…、show…、get…、check… 等等</p>
<h3 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6.箭头函数"></a>6.箭头函数</h3><p>一行代码的函数,具体有两种：</p>
<ul>
<li><p>1.不带花括号：<code>(...args) =&gt; expression</code> — 右侧是一个表达式：函数计算表达式并返回其结果。</p>
</li>
<li><p>2.带花括号：<code>(...args) =&gt; &#123; body &#125;</code> — 花括号允许我们在函数中编写多个语句，但是我们需要显式地 return 来返回一些内容。</p>
</li>
</ul>
<h3 id="7-对象"><a href="#7-对象" class="headerlink" title="7.对象"></a>7.对象</h3><p>对象是具有一些特殊特性的关联数组。</p>
<p>点符号: obj.property。</p>
<p>方括号 obj[“property”]，方括号允许从变量中获取键，例如 obj[varWithKey]。</p>
<p>其他操作：</p>
<p>删除属性：delete obj.prop。</p>
<p>检查是否存在给定键的属性：<code>&quot;key&quot; in obj</code>。</p>
<p>遍历对象：<code>for(let key in obj)</code> 循环。</p>
<p>JavaScript 中还有很多其他类型的对象：</p>
<p><code>Array</code> 用于存储有序数据集合，</p>
<p><code>Date </code>用于存储时间日期，</p>
<p><code>Error</code> 用于存储错误信息。</p>
<h3 id="8-对象方法，”this”"><a href="#8-对象方法，”this”" class="headerlink" title="8.对象方法，”this”"></a>8.对象方法，”this”</h3><p>存储在对象属性中的函数被称为“方法”。</p>
<p>方法允许对象进行像 object.doSomething() 这样的“操作”。</p>
<p>方法可以将对象引用为 <code>this</code>。</p>
<p>   this 的值是在程序运行时得到的。</p>
<p>一个函数在声明时，可能就使用了 this，但是这个 this 只有在函数被调用时才会有值。</p>
<p>可以在对象之间复制函数。</p>
<p>以“方法”的语法调用函数时：object.method()，调用过程中的 this 值是 object。</p>
<p>请注意箭头函数有些特别：它们没有 this。在箭头函数内部访问到的 this 都是从外部获取的。</p>
<h3 id="9-字符串"><a href="#9-字符串" class="headerlink" title="9.字符串"></a>9.字符串</h3><ul>
<li><p><code>str.trim()</code> —— 删除字符串前后的空格 (“trims”)。</p>
</li>
<li><p><code>str.repeat(n)</code> —— 重复字符串 n 次。</p>
</li>
</ul>
<h3 id="10-数组"><a href="#10-数组" class="headerlink" title="10.数组"></a>10.数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [item1, item2...];</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>push(...items)</code> 在末端添加 items 项。</p>
</li>
<li><p><code>pop()</code> 从末端移除并返回该元素。</p>
</li>
<li><p><code>shift()</code> 从首端移除并返回该元素。</p>
</li>
<li><p><code>unshift(...items)</code> 从首端添加 items 项。</p>
</li>
</ul>
<p>遍历数组的元素：</p>
<ul>
<li><code>for (let i=0; i&lt;arr.length; i++)</code> — 运行得最快，可兼容旧版本浏览器。</li>
<li><code>for (let item of arr)</code> — 现代语法，只能访问 items。</li>
<li><code>for (let i in arr)</code> — 永远不要用这个。</li>
</ul>
<p>比较数组时，不要使用 &#x3D;&#x3D; 运算符（当然也不要使用 &gt; 和 &lt; 等运算符）</p>
<p>可以使用 <code>for..of </code>循环来逐项比较数组。</p>
<h3 id="11-数组方法"><a href="#11-数组方法" class="headerlink" title="11.数组方法"></a>11.数组方法</h3><p>数组方法备忘单：</p>
<p>添加&#x2F;删除元素：</p>
<ul>
<li><p><code>push(...items)</code> —— 向尾端添加元素，</p>
</li>
<li><p><code>pop()</code> —— 从尾端提取一个元素，</p>
</li>
<li><p>shift() —— 从首端提取一个元素，</p>
</li>
<li><p>unshift(…items) —— 向首端添加元素，</p>
</li>
<li><p><code>splice(pos, deleteCount, ...items) </code>—— 从 pos 开始删除 deleteCount 个元素，并插入 items。</p>
</li>
<li><p>slice(start, end) —— 创建一个新数组，将从索引 start 到索引 end（但不包括 end）的元素复制进去。</p>
</li>
<li><p><code>concat(...items)</code> —— 返回一个新数组：复制当前数组的所有元素，并向其中添加 items。如果 items 中的任意一项是一个数组，那么就取其元素。</p>
</li>
</ul>
<p>搜索元素：</p>
<p>遍历元素：</p>
<ul>
<li><code>forEach(func)</code> —— 对每个元素都调用 func，不返回任何内容。</li>
</ul>
<p>转换数组（常用）：</p>
<ul>
<li><p><code>reverse()</code> —— 原位（in-place）反转数组，然后返回它。</p>
</li>
<li><p><code>split/join</code> —— 将字符串转换为数组并返回。</p>
</li>
<li><p><code>Array.isArray(arr)</code> 检查 arr 是否是一个数组。</p>
</li>
</ul>
<h3 id="12-”new-Function”-语法"><a href="#12-”new-Function”-语法" class="headerlink" title="12.”new Function” 语法"></a>12.”new Function” 语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="keyword">new</span> <span class="title class_">Function</span> ([arg1, arg2, ...argN], functionBody);</span><br></pre></td></tr></table></figure>

<p>以下三种声明的含义相同：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 基础语法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a,b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号分隔</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a , b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>); <span class="comment">// 逗号和空格分隔</span></span><br></pre></td></tr></table></figure>

<h3 id="13-DOM—document树"><a href="#13-DOM—document树" class="headerlink" title="13.DOM—document树"></a>13.DOM—document树</h3><p>查询：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>); <span class="comment">//获取一个类似数组的元素</span></span><br><span class="line"><span class="keyword">var</span> divs2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>]; <span class="comment">//获取类似数组的第一个元素  </span></span><br><span class="line"><span class="keyword">var</span> divs3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">1</span>]; <span class="comment">//获取类似数组的第二个元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用频率最高最高！！！！！ ---返回一个元素</span></span><br><span class="line">        <span class="keyword">var</span> root = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(root);</span><br><span class="line">        root.<span class="property">innerHTML</span> = <span class="string">&quot;heiheieheie&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// document.querySelectorALL 查询CSS选择器 返回所有</span></span><br><span class="line">        <span class="keyword">var</span> navs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.nav&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(navs); <span class="comment">//NodeList(2) [div.nav, div.nav] -- 两个都打印</span></span><br></pre></td></tr></table></figure>

<p>document创建元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>document 创建元素<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//document.createElement  用来创造标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> content = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;我是文本&quot;</span>); <span class="comment">// 文本</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//document.createAttribute 添加属性 &#x27;id&#x27; &#x27;class&#x27;...</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;id&quot;</span>);  <span class="comment">// 添加属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// value为属性赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        id.<span class="property">value</span>= <span class="string">&quot;root&quot;</span>; <span class="comment">//id 赋值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var class1 = document.createAttribute(&quot;class&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// class1.value=&quot;box&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// text.setAttributeNode(class1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  appendChild  将文本插入到标签当中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        text.<span class="title function_">appendChild</span>(content); <span class="comment">// 文本插入标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setAttributeNode 将属性插入到标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        text.<span class="title function_">setAttributeNode</span>(id);  <span class="comment">//属性插入标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(content);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(id);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> container1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        container1.<span class="title function_">appendChild</span>(text);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(container1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="13-时间处理程序—DOM-、HTML"><a href="#13-时间处理程序—DOM-、HTML" class="headerlink" title="13.时间处理程序—DOM 、HTML"></a>13.时间处理程序—DOM 、HTML</h3><p>DOM0 事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM0 事件优点： HTML和JS 是分离的   缺点：  无法同时添加多个事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了按钮&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DOM2级事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM2事件  优点： 事件不会被覆盖  缺点： 写起来麻烦</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了按钮&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了按钮222&quot;</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>事件类型之鼠标事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;单击事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">btn2.<span class="property">ondblclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;双击事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">btn3.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标按下事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn4.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标抬起事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">btn5.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移动经过事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn6.<span class="property">onmouseenter</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标进入事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn7.<span class="property">onmouseleave</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标离开事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">btn8.<span class="property">onmouseover</span>= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标经过事件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn9.<span class="property">onmouseout</span>= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标离开事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Event事件：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>); <span class="comment">//target--直接打印标签--可以直接修改元素</span></span><br><span class="line">            <span class="comment">// event.target.innerHTML = &quot;点击之后&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>); <span class="comment">// click  -- click事件</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表单事件：</p>
<pre><code>     `select` -- 选中内容时触发事件

​    `Change `-- “回车” 或者 “失去交点” 的时候触发  跟input不同（password）

​    `reset `--  重置表单 --触发在表单上  清空表单
</code></pre>
<p>​    </p>
<pre><code>     `submit `--  数据提交给服务器
</code></pre>
</li>
</ul>
<h3 id="14-定时器："><a href="#14-定时器：" class="headerlink" title="14.定时器："></a>14.定时器：</h3><ul>
<li>setTimeout  clearTimeout</li>
<li>setInterval  —设置时间间隔，无限次数  可以用来做动画 clearInterval</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="15-防抖和节流"><a href="#15-防抖和节流" class="headerlink" title="15.防抖和节流"></a>15.防抖和节流</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn , delay</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> valid = <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               valid = <span class="literal">false</span>;</span><br><span class="line">               <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="title function_">fn</span>();</span><br><span class="line">                   valid = <span class="literal">true</span> ;</span><br><span class="line">               &#125;,delay)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(scrollHandle,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">scrollHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="keyword">var</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(scrollTop);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-对象解构赋值"><a href="#16-对象解构赋值" class="headerlink" title="16.对象解构赋值"></a>16.对象解构赋值</h3><p><font color="red">Const–简化</font></p>
<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用解构赋值方式简化</span></span><br><span class="line"><span class="keyword">const</span>&#123;name,age&#125;=user; <span class="comment">// key值必须对应上 不能改名字</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>&#123; log&#125; = <span class="variable language_">console</span>; <span class="comment">// 将打印console。log简化 </span></span><br><span class="line"><span class="title function_">log</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;abs,ceil,floor,random&#125; = <span class="title class_">Math</span>;  <span class="comment">//简化Math中的一些方法</span></span><br><span class="line"><span class="title function_">log</span>(<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure>

<h3 id="17-Promise对象–异步处理（常用-）"><a href="#17-Promise对象–异步处理（常用-）" class="headerlink" title="17.Promise对象–异步处理（常用 ）"></a>17.Promise对象–异步处理（常用 ）</h3><p>​	<strong>异步编程 的一种解决方案</strong></p>
<p>​    简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作–网络请求）</p>
<p>​    避免层层嵌套</p>
]]></content>
      <categories>
        <category>Js</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite搭建项目</title>
    <url>/2024/06/13/Vite%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="创建Vue3-Vite的项目"><a href="#创建Vue3-Vite的项目" class="headerlink" title="创建Vue3+Vite的项目"></a>创建Vue3+Vite的项目</h3><p>要求： vite 需要 Node.js 版本 18+</p>
<p>创建命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm create vite@lastest 项目名称 -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite 项目名称 --template vue</span><br><span class="line"></span><br><span class="line"># pnpm</span><br><span class="line">pnpm create vite 项目名称 --template vue</span><br></pre></td></tr></table></figure>

<p>下载依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#npm：</span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure>

<p>启动项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h5 id="后续安装-router、-element-plus-等依赖"><a href="#后续安装-router、-element-plus-等依赖" class="headerlink" title="后续安装 router、 element-plus 等依赖"></a>后续安装 router、 element-plus 等依赖</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-router element-plus -s</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vite</category>
      </categories>
      <tags>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-回顾</title>
    <url>/2024/04/05/Vue3%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p><font color="green">Vue 语法知识点自我回顾及代码</font></p>
<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p><code>&#123;&#123;花括号&#125;&#125;</code>的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><code>v-if</code> <code>v-else</code> <code>v-show</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   &lt;p v-<span class="keyword">if</span>=<span class="string">&quot;flag&quot;</span>&gt;我是孙猴子&lt;/p&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>你是傻猴子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>你真的是孙猴子吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>	</span><br><span class="line"></span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">     <span class="attr">msg</span>: <span class="string">&quot;条件渲染&quot;</span>,</span><br><span class="line">     <span class="attr">flag</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><code>v-for</code> <code>v-html</code>的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> //html</span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in newsList&quot;</span>  <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;li v-for=&quot;(item, index) in newsList&quot;  :key=&quot;item.id&quot;&gt;  没有id时用索引 --&gt;</span></span><br><span class="line">     &#123;&#123; item.title &#125;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">newsList</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1001</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;今日新闻1&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1002</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;今日新闻2&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1003</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;今日新闻3&quot;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="attr">rawHtml</span>:<span class="string">&quot;&lt;a href=&#x27;http://wangjiael6.github.io&#x27;&gt;佳乐博客&lt;/a&gt;&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p><code>V-on</code>指令 通常缩写为<code>@</code> 来监听DOM事件，触发时执行JavaScript，</p>
<p>用法为 <code>V-on click = &quot;methodName&quot;</code>或者快捷方式 <code>@click = &quot;methodName&quot;</code></p>
<p>点击事件、失去焦点等等：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter+=1&quot;</span>&gt;</span>v-on 点击:&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-on 缩写成 @ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter1+=1&quot;</span>&gt;</span>@ 点击:&#123;&#123; counter1 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickHander&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span> &gt;</span>say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span> &gt;</span>say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    // 事件传递参数  li标签内传参</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;clickItemHander(item)&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in names&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>v-on中可以写指令   更多的是写方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&quot;监听事件&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">counter</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">counter1</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">message</span>:<span class="string">&quot;消息通知&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">names</span>:[<span class="string">&quot;iwen&quot;</span>,<span class="string">&quot;ime&quot;</span>,<span class="string">&quot;frank&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">clickHander</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      <span class="comment">// 在事件中，读取data中的属性，是需要通过 this.属性</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;消息已读&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// event 是原生 DOM event</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line"></span><br><span class="line">      event.<span class="property">target</span>.<span class="property">innerHTML</span> = <span class="string">&quot;点击之后&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 事件传递参数</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params">data</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="comment">// 事件传递参数  li标签内传参</span></span><br><span class="line">    <span class="title function_">clickItemHander</span>(<span class="params">item</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中的<code>event</code>是原生DOM event，可以获取到</p>
<p>可以用来获取标签并修改  举例：修改 按钮的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// event 是原生 DOM event</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line"></span><br><span class="line">event.<span class="property">target</span>.<span class="property">innerHTML</span> = <span class="string">&quot;点击之后&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>事件传递参数–（内联处理器）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">   &lt;button @click=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span> &gt;say hi&lt;/button&gt;  </span><br><span class="line"><span class="comment">// 传递参数hi  、 what</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span> &gt;</span>say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件传递参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data 就是传递过来的参数</span></span><br><span class="line">    <span class="title function_">say</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clickItemHander</span>(<span class="params">item</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h3><p>  使用<code>v-model</code>指令在表单 <code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code>以及<code>&lt;select&gt;</code>元素上创建双向数据绑定。</p>
<p>  不过<code>v-model</code>本质上不过是语法糖。</p>
<p>​	<font color = "red">就是说输入时一边输入一边获取！！</font></p>
<p>修饰符<code>.lazy</code>和<code>.trim</code> </p>
<p><code>.lazy</code>—变成<code>change</code>事件（不会立刻同步） 回车后或者失去焦点后检索</p>
<p><code>.trim</code> —自动过滤首尾输入的空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修饰符 lazy 回车后或者失去焦点后检索 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; username &#125;&#125;,&#123;&#123; password &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;ClickGetUsername&quot;</span>&gt;</span> 获取用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&quot;表单输入绑定&quot;</span>,</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title class_">ClickGetUsername</span>()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>加载组件：</p>
<ul>
<li><p>引入组件：import·····</p>
</li>
<li><p>挂载组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">MyComponent</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示组件(两种写法)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>中 写入  `<span class="tag">&lt;<span class="name">my-component</span> /&gt;</span>`</span><br><span class="line">    或者 写入  `<span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>`</span><br></pre></td></tr></table></figure>

<p>​				</p>
<p><code>scoped</code>: 如果在style中添加此属性，就代表着，当前样式，只在当前组件中生效</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!-- scoped: 如果在style中添加此属性，就代表着，当前样式，只在当前组件中生效 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h3><p>父组件 App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;我是一个标题&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">      <span class="attr">names</span>:[<span class="string">&quot;iwen&quot;</span>,<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;frank&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">MyComponent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子组件：MyComponents</p>
<p>重点是： <font color="green">数组和对象必须使用函数进行返回</font></p>
<p>格式：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">       <span class="attr">title</span>:&#123;</span><br><span class="line">           <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">           <span class="attr">default</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;MyComponent&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">default</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">age</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">            <span class="attr">default</span>:<span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">names</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">Array</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 数组和对象必须使用函数进行返回</span></span><br><span class="line">            <span class="attr">default</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义子组件组内反向传播"><a href="#自定义子组件组内反向传播" class="headerlink" title="自定义子组件组内反向传播"></a>自定义子组件组内反向传播</h3><p>就是说子组件向父组件 App.vue 传递 <code>$emit</code></p>
<p>子组件：  通过事件传递—&lt;button<code>@click=&quot;sendClickHandle&quot;</code>&gt;点击传递</button></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">sendClickHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//参数1 字符串  理论上是随便的  但需要有意义</span></span><br><span class="line">            <span class="comment">//参数2  传递的数据</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;onEvent&quot;</span>,<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>父组件：  通过&lt;MyComponent @onEvent&#96;&#x3D;”getDataHandle”  &#x2F;&gt;事件接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">getDataHandle</span>(<span class="params">data</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span>=data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后用data接收    再显示在页面之上。</p>
<h3 id="Vue引入第三方"><a href="#Vue引入第三方" class="headerlink" title="Vue引入第三方"></a>Vue引入第三方</h3><p><code>Swiper</code>开源、免费、强大的触摸滑动插件</p>
<p><code>Swiper</code>是纯JavaScript打造的滑动特效插件</p>
<p><code>Swiper</code>能实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果</p>
<p>先终端安装 指定版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save swiper@8.1.6</span><br></pre></td></tr></table></figure>

<p>子组件引入<code>Swiper</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入 Swiper</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Swiper</span>, <span class="title class_">SwiperSlide</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;swiper/vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="comment">//添加modules</span></span><br><span class="line">      <span class="attr">modules</span>:[<span class="title class_">Pagination</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里引入，然后再 template 使用</span></span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">Swiper</span>,</span><br><span class="line">    <span class="title class_">SwiperSlide</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Html中的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      // 加入modules  加入指示器</span><br><span class="line">   <span class="tag">&lt;<span class="name">Swiper</span> <span class="attr">:modules</span>=<span class="string">&quot;modules&quot;</span> <span class="attr">:pagination</span>=<span class="string">&quot;&#123; Clickable: true &#125;&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">Swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加指示器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入指示器和css</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pagination</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;swiper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/css/pagination&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Swiper和css</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Swiper</span>, <span class="title class_">SwiperSlide</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;swiper/vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/css&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Axios-网络请求"><a href="#Axios-网络请求" class="headerlink" title="Axios 网络请求"></a>Axios 网络请求</h3><p>先在终端安装 axios：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure>

<p>组件中引入（使用率低）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br></pre></td></tr></table></figure>

<p>直接使用 get （快捷方式） ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快捷 get 请求方式</span></span><br><span class="line"> axios.<span class="title function_">get</span>(<span class="string">&quot; --这里填写URL的地址-- &quot;</span>)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>post的快捷方式：</p>
<p>post请求 参数需要额外处理 安装依赖<code>npm install --save querystring</code>  然后引入<code>import</code></p>
<p>转换参数格式：<code>qs.stringify(&#123;&#125;)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快捷 post 请求方式</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot; --这里填写URL的地址-- &quot;</span>,querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">  <span class="attr">user_id</span>:<span class="string">&quot;iwen&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>:<span class="string">&quot;iwen123&quot;</span>,</span><br><span class="line">  <span class="attr">verification_code</span>:<span class="string">&quot;crfvw&quot;</span></span><br><span class="line">&#125;)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<p>全局引入（使用率高）：</p>
<p>在main.js 中引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  全局 挂载 axios</span></span><br><span class="line"><span class="comment">// 创建app，然后挂载</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">//先全局引入</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用时添加上 <code>this.$axios</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快捷 get 请求方式</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&quot;hhttp://iwenwiki.com/api/blueberrypai/getchengpinDetails.php&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Axios网络请求封装"><a href="#Axios网络请求封装" class="headerlink" title="Axios网络请求封装"></a>Axios网络请求封装</h3><p>先安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure>

<p>在装上querystring</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save querystring</span><br></pre></td></tr></table></figure>

<p>在src目录下创建 utils，再其下创建 request.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; error &#125; <span class="keyword">from</span> <span class="string">&quot;console&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&quot;process&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> querystring <span class="keyword">from</span> <span class="string">&quot;querystring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考文档 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">errorHandle</span> = (<span class="params">status, info</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;语义有误&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器认证失败&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器拒绝访问&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;地址有误&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器遇到意外&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器无响应&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 网络请求的公共配置</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器  是最常用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据之前的拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">methods</span> === <span class="string">&quot;post&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//直接对post所需要的参数进行格式转换</span></span><br><span class="line">      config.<span class="property">data</span> = querystring.<span class="title function_">stringify</span>(config.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含网络请求的所有信息</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据之前    的拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">status</span> === <span class="number">200</span></span><br><span class="line">      ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response)</span><br><span class="line">      : <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误的处理 才是需要关注的</span></span><br><span class="line">    <span class="title function_">errorHandle</span>(response.<span class="property">status</span>, response.<span class="property">info</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Vue引入路由—页面跳转"><a href="#Vue引入路由—页面跳转" class="headerlink" title="Vue引入路由—页面跳转"></a>Vue引入路由—页面跳转</h3><p>src下创建router文件，在其内创建index.js写路由文件（直接使用集成的话不需要）</p>
<p>src下创建views文件夹—-用来写页面 <code>home</code> <code>about</code></p>
<p>路由的显示入口：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//template 内</span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span> <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写跳转：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//template 内</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span> 关于<span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// router 的显示入口</span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span> <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>自动创建路由</p>
<p>有个关键 引入小页面路由时 是用异步加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在router下 index.js中引入路由：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;news&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是异步加载方式</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/NewsView.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>只有首页在 顶部引用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="嵌套路由配置"><a href="#嵌套路由配置" class="headerlink" title="嵌套路由配置"></a>嵌套路由配置</h3><p>就是层层导航嵌套</p>
<ul>
<li><p>配置时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;about&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在这里添加 children</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在这里添加嵌套子导航</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>( <span class="string">&#x27;../views/AboutView.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">// 二级导航路径不需要加 &quot;/&quot;</span></span><br><span class="line">          </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;us&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutSub/AboutUs.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutSub/AboutInfo.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>


</li>
<li><p>需要在引入时写上全部路径（包括父级和二级）</p>
</li>
<li><p>二级导航路径不需要加 “&#x2F;“</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 这是在template引入</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/us&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/info&quot;</span>&gt;</span>关于信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 重定向 -- 显示二级</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&quot;/about/us&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>( <span class="string">&#x27;../views/AboutView.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">// 二级导航路径不需要加 &quot;/&quot;</span></span><br><span class="line">          </span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;us&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutSub/AboutUs.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutSub/AboutInfo.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Vuex–Vue状态管理-–store"><a href="#Vuex–Vue状态管理-–store" class="headerlink" title="Vuex–Vue状态管理 –store"></a>Vuex–Vue状态管理 –store</h3><p>1不用集成创建的话 需要安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vuex</span><br></pre></td></tr></table></figure>

<p>2src目录下创建 <code>store</code> 再其目录下创建<code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建仓库再导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuex 的核心作用是帮我们管理组件之间的状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="comment">// 所有的状态都放在这里（数据）</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">counter</span>:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3在主文件引入</p>
<p>4组件中使用(  –两种方法 – )：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>counter = &#123;&#123; $store.state.counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Vuex–-vue状态管理核心-–store"><a href="#Vuex–-vue状态管理核心-–store" class="headerlink" title="Vuex– vue状态管理核心 –store"></a>Vuex– vue状态管理核心 –store</h3><p>常用核心概念：<code>State</code> <code>Getter</code> <code>Mutation</code> <code>Action</code></p>
<ul>
<li><code>State</code> ：存储状态  读取</li>
<li><code>Getter</code>：对Vue 中的数据进行过滤</li>
<li><code>Mutation</code>：是 更改vuex的store中的状态的唯一方法  只能<code>同步操作</code></li>
<li><code>Action</code>： 提交的是mutation， 主要是可以包含任意<code>异步操作</code></li>
</ul>
<p>store中index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>:<span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="title function_">getCounter</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">counter</span> &gt; <span class="number">0</span> ? state.<span class="property">counter</span> : <span class="string">&quot;counter数据异常&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">addCounter</span>(<span class="params">state,num</span>)&#123;</span><br><span class="line">      state.<span class="property">counter</span>+= num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为异步操作所准备的</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="title function_">asyncAddCounter</span>(<span class="params">&#123; commit &#125;</span>)&#123;</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">&quot;--地址--&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&quot;addCounter&quot;</span>,res.<span class="property">data</span>[<span class="number">0</span>])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3新特性</title>
    <url>/2024/04/10/Vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><font color="red">Vue3 的一些常用新特性</font></p>
<p>底层改成Ts,更支持Ts</p>
<h3 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h3><p><em><strong>组合式API将原本的  <code>data()&#123;&#125; </code>、<code>methods:&#123;&#125; </code>等都换了一种方式</strong></em></p>
<p><code>setup()</code>–组合式API</p>
<ul>
<li><p>会给 <code>ref</code> 或者 <code>reactive</code> 有点代替 <code>data</code> 的意思:</p>
</li>
<li><p><code>reactive</code> 一般声明对象、  –列表等</p>
<p>必须先引入然后在 setup中 ref 声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// template</span></span><br><span class="line">&lt;p&gt; &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; ref &#125; from &quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref ,reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//ref</span></span><br><span class="line">        <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;我是消息&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合式 API</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>)&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// setup 中没有this 关键字</span></span><br><span class="line">  <span class="comment">// console.log(this); //undefined   ------------------</span></span><br><span class="line">  <span class="comment">// ---改用了setup(props, context)  context简写成 ctx  ---------------</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// console.log(props.msg);</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">// ref  先引入(用到那个打包那个)</span></span><br><span class="line">  <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;我是消息&quot;</span>)</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// reactive  声明数组类型或者复杂一点的数据</span></span><br><span class="line">  <span class="keyword">const</span> names = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="attr">list</span>:[<span class="string">&quot;iwen&quot;</span>,<span class="string">&quot;ime&quot;</span>,<span class="string">&quot;frank&quot;</span>],</span><br><span class="line">   </span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// methods 方法写入组合API setup当中</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">clickHandle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了&quot;</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 通过 message 的 value 来修改消息</span></span><br><span class="line">    message.<span class="property">value</span> = <span class="string">&quot;我是新的消息&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// props 显示</span></span><br><span class="line">  <span class="keyword">const</span> msg=props.<span class="property">msg</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    message,</span><br><span class="line">    names,</span><br><span class="line">    clickHandle,</span><br><span class="line">    msg</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
<li><p>setup中没有  this关键字</p>
</li>
<li><p><code>props</code>的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attr">props</span>:&#123;</span><br><span class="line">	<span class="comment">// 只用设置类型</span></span><br><span class="line">	<span class="attr">msg</span>:<span class="title class_">String</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="comment">//这里拿到 msg</span></span><br><span class="line">		<span class="keyword">const</span> msg = props.<span class="property">msg</span></span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            msg, <span class="comment">//这里记得return出去  然后在template 使用</span></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>想要获取实例，只能用<code>context</code> 因为setup中没有<code>this</code>关键字</li>
</ul>
</li>
</ul>
<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ul>
<li><p>在<code>setup</code>中使用生命周期函数—直接在钩子函数前面加上 <code>on</code></p>
<p>创建时：beforeCreate、created<br></p>
<p>渲染时：beforeMount、mounted<br></p>
<p>更新时：beforeUpdate、updated<br></p>
<p>卸载时：beforeUnmount、unmounted<br></p>
</li>
<li><p>渲染时：onBeforeMount、onMounted<br></p>
<p>更新时：onBeforeUpdate、onUpdated<br></p>
<p>卸载时：onBeforeUnmount、onUnmounted<br></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生命周期函数 在setup当中 要改写成  箭头函数</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 比以前有优势， 以前的同一个生命周期函数只能存在一个，现在可以存在多个</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生命周期函数:Mounted1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生命周期函数:Mounted2&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// provide和 inject 父级传递给子级  -------------</span></span><br><span class="line">  <span class="keyword">const</span> message = <span class="title function_">inject</span>(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    message</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide &#x2F; Inject"></a>Provide &#x2F; Inject</h3><ul>
<li><p><code>provide()</code>、<code>inject()</code> 可以实现嵌套组件之间的数据传递</p>
</li>
<li><p>这两个函数只能在<code>setup()</code>函数中使用</p>
</li>
<li><p>父组件使用<code>provide()</code>函数向下传递数据</p>
</li>
<li><p>子组件中使用<code>inject()</code>获取上层传递过来的数据</p>
</li>
<li><p>不限层级</p>
</li>
</ul>
<p>使用方法 </p>
<p>​	先引入 import { provide} from “vue”</p>
<p>​	然后在 setup中使用</p>
<p>传</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;我是消息&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">setup&#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">injest</span>(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//然后return出去 </span></span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">    	message</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Vue-3-加载Element—plus"><a href="#Vue-3-加载Element—plus" class="headerlink" title="Vue 3 加载Element—plus"></a>Vue 3 加载Element—plus</h3><p>​	桌面组件库</p>
<ul>
<li>安装：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>引入：两种</p>
<p>完整引入</p>
<p>按需引入（最受青睐）</p>
<ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>vue.config.js</code>配置文件—（复制一堆）</p>
</li>
<li></li>
</ul>
</li>
</ul>
<h3 id="Vue-3-加载Element-plus的字体图标"><a href="#Vue-3-加载Element-plus的字体图标" class="headerlink" title="Vue 3 加载Element-plus的字体图标"></a>Vue 3 加载Element-plus的字体图标</h3><ul>
<li><p>安装<code>icons</code>字体图标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局注册：根目录下，创建<code>plugins</code>文件夹，在文件夹下创建文件<code>icons.js</code>文件—（复制一坨）</p>
</li>
<li><p>引入文件： 在主文件<code>main.js</code>中引入<code>icon.js</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import elementIcon from &quot;./plugins/icons&quot;</span><br><span class="line">app.use(elementIcon)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用   ： 在组件中引入</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>click点击事件没报错但不能触发？</title>
    <url>/2024/06/17/click%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%B2%A1%E6%8A%A5%E9%94%99%E4%BD%86%E4%B8%8D%E8%83%BD%E8%A7%A6%E5%8F%91%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="问题：-在写项目的时候-需要添加一个点击事件，但是发现不能触发"><a href="#问题：-在写项目的时候-需要添加一个点击事件，但是发现不能触发" class="headerlink" title="问题： 在写项目的时候 需要添加一个点击事件，但是发现不能触发"></a>问题： 在写项目的时候 需要添加一个点击事件，但是发现不能触发</h3><p>  开始排查问题 将点击事件代码重写一遍查看后  发现没有报错，点击后不生效</p>
<p>随后添加鼠标移入变为小手状态代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 鼠标放上有小手指</span><br><span class="line"><span class="attribute">cursor</span>: pointer <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure>

<p>然后发现是样式溢出问题</p>
<p>重新对引入的element-Plus样式做了 穿透样式处理，解决了问题</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">!important</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue文档风格的Typora主题</title>
    <url>/2024/03/30/Vue%E6%96%87%E6%A1%A3%E9%A3%8E%E6%A0%BC%E7%9A%84Typora%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://github.com/blinkfox/typora-vue-theme">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/">Vue</a>文档风格的主题。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href="https://github.com/blinkfox/typora-vue-theme">typora-vue-theme</a>就是参考了<a href="https://vuejs.org/">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p>
<p><font color="green">用起来还挺不错的</font>&gt;</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/03/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>调试排查项目问题使用nvm下载报错？</title>
    <url>/2024/06/16/nvm%E4%B8%8B%E8%BD%BD%E6%8A%A5%E9%94%99%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="问题：-测试node版本对项目影响，在使用nvm下载node时报错："><a href="#问题：-测试node版本对项目影响，在使用nvm下载node时报错：" class="headerlink" title="问题： 测试node版本对项目影响，在使用nvm下载node时报错："></a>问题： 测试node版本对项目影响，在使用nvm下载node时报错：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nvm list available时遇到：<span class="title class_">Could</span> not retrieve <span class="attr">https</span>:<span class="comment">//nodejs.org/dist/index.json</span></span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>找到<code>nvm</code>安装目录</p>
<p>找到目录下文档<code>settings.txt</code>,添加或修改（下载nvm有时有，有时没有需要自己添加）如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">node_mirror</span>: <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node/</span></span><br><span class="line"><span class="attr">npm_mirror</span>: <span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/npm/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>早上打开VS发现命令npm、nvm、nrm都不能使用？？</title>
    <url>/2024/06/16/%E6%97%A9%E4%B8%8A%E6%89%93%E5%BC%80VS%E5%8F%91%E7%8E%B0%E5%91%BD%E4%BB%A4npm%E3%80%81nvm%E3%80%81nrm%E9%83%BD%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%EF%BC%9F%EF%BC%9F/</url>
    <content><![CDATA[<h3 id="问题：早上打开VScode-运行代码时-npm出错"><a href="#问题：早上打开VScode-运行代码时-npm出错" class="headerlink" title="问题：早上打开VScode 运行代码时 npm出错"></a>问题：早上打开VScode 运行代码时 npm出错</h3><p> 明明是重新安装了<code>nvm</code>来控制调整node版本，却发现出错</p>
<p>开始排查  卸载<code>nvm</code>及<code>node</code> 重新下载后可以使用。</p>
<p>开始测试  当电脑重启后 启动项目发现还是出错，重新排查</p>
<p>发现是下载<code>nvm</code>后 环境变量需要调整。下载了多个版本 创建<code>nodejs</code>文件夹固定一个版本位置</p>
<p>设置变量后 发现可以正常使用</p>
]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>命令字段</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm的使用</title>
    <url>/2024/06/14/nvm%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="nvm是一个node版本管理工具，可以快速切换、安装、查看node的版本。与npm不同的是，npm是依赖包的管理工具。"><a href="#nvm是一个node版本管理工具，可以快速切换、安装、查看node的版本。与npm不同的是，npm是依赖包的管理工具。" class="headerlink" title="nvm是一个node版本管理工具，可以快速切换、安装、查看node的版本。与npm不同的是，npm是依赖包的管理工具。"></a>nvm是一个node版本管理工具，可以快速切换、安装、查看node的版本。与npm不同的是，npm是依赖包的管理工具。</h4><ul>
<li><p>下载地址： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p>
</li>
<li><p>查看当前版本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看所有版本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载版本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nvm install 版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换版本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="nrm-：npm的镜像源管理工具"><a href="#nrm-：npm的镜像源管理工具" class="headerlink" title="nrm ：npm的镜像源管理工具"></a>nrm ：npm的镜像源管理工具</h4><ul>
<li><p>安装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看可选择的源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nrm use 对应的镜像</span><br></pre></td></tr></table></figure></li>
</ul>
<p>使用npm更加方便管理！</p>
]]></content>
      <categories>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>横向布局</title>
    <url>/2024/06/17/%E6%A8%AA%E5%90%91%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h4 id="问题-：-写项目时需要横向布局"><a href="#问题-：-写项目时需要横向布局" class="headerlink" title="问题 ： 写项目时需要横向布局"></a>问题 ： 写项目时需要横向布局</h4><p>横向布局代码：</p>
<p>–父</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow-x</span>: auto; <span class="comment">/* 横向滚动 */</span></span><br></pre></td></tr></table></figure>

<p>– 子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex; <span class="comment">/* Flex 布局 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap; <span class="comment">/* 阻止项目换行 */</span></span><br></pre></td></tr></table></figure>

<p>– content</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto; <span class="comment">/* 每个项目占据自适应宽度 */</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
